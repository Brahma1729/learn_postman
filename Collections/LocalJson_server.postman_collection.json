{
	"info": {
		"_postman_id": "54245421-555a-4f82-91b8-4b2e87e286fa",
		"name": "LocalJson_server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetAllStudents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"test Status code\", function(){",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"// validation of header contains Content-Type Key",
							"pm.test(\"content-type Validation\", () => {",
							"    pm.response.to.have.header(\"Content-Type\")",
							"})",
							"",
							"// validation of header contains Content-Type value",
							"pm.test(\"content-type Value validation\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')",
							"})",
							"",
							"// response time validation",
							"",
							"pm.test(\"Response time validation\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(50)",
							"})",
							"",
							"//Response Body Validation",
							"",
							"const resbody = pm.response.json();",
							"",
							"// Response data type validation",
							"pm.test(\"Test data types of the response content\", function ()",
							"{",
							"    pm.expect(resbody).to.be.an(\"array\")",
							"    pm.expect(resbody[0]).to.be.an(\"object\")",
							"    pm.expect(resbody[0].name).to.be.an(\"string\")",
							"    pm.expect(resbody[0].id).to.be.an(\"number\")",
							"    pm.expect(resbody[0].courses).to.be.an(\"array\")",
							"})",
							"",
							"// Response array property validation",
							"",
							"pm.test(\"Validate array content\", () =>",
							"{",
							"    pm.expect(resbody[0].courses).to.include(\"java\");",
							"",
							"    pm.expect(resbody[0].courses).to.have.members([\"java\", \"Selenium\"])",
							"})",
							"",
							"//Validating JSON fields in Response",
							"",
							"pm.test(\"Validate Response JSON Fields\", () =>",
							"{",
							"    pm.expect(resbody[0].name).to.eql(\"John\")",
							"    pm.expect(resbody[1].name).to.eql(\"Jack\")",
							"    pm.expect(resbody[2].name).to.eql(\"Veera\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/Students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"Students"
					]
				}
			},
			"response": []
		},
		{
			"name": "getstudentdetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"json Schema validation\", () =>",
							"{",
							"    const resp = pm.response.json();",
							"    let schema = {",
							"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"id\": {",
							"            \"type\": \"integer\"",
							"            },",
							"            \"name\": {",
							"            \"type\": \"string\"",
							"            },",
							"            \"location\": {",
							"            \"type\": \"string\"",
							"            },",
							"            \"phone\": {",
							"            \"type\": \"string\"",
							"            },",
							"            \"courses\": {",
							"            \"type\": \"array\",",
							"            \"items\": [",
							"                {",
							"                \"type\": \"string\"",
							"                },",
							"                {",
							"                \"type\": \"string\"",
							"                }",
							"            ]",
							"            }",
							"        },",
							"        \"required\": [",
							"            \"id\",",
							"            \"name\",",
							"            \"location\",",
							"            \"phone\",",
							"            \"courses\"",
							"        ]",
							"        }",
							"    pm.expect(tv4.validate(resp,schema)).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/Students/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"Students",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add_Student",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sam\",\n    \"location\": \"India\",\n    \"phone\": \"9900889903\",\n    \"courses\": [\n        \"C\",\n        \"C#\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/Students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"Students"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateStudent",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sam\",\n    \"location\": \"India\",\n    \"phone\": \"9900889903\",\n    \"courses\": [\n        \"R\",\n        \"C#\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/Students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"Students",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteStudent",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/Students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"Students",
						"4"
					]
				}
			},
			"response": []
		}
	]
}